%YAML 1.1
---
ANONYMOUS:
  debug level: 0
  verbosity: 0
  Mesh input file: input_mesh.yaml
  Physics: 
    modules: maxwell
    assemble boundary terms: false
    Initial conditions:
      'E[x]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
      'E[y]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
      'E[z]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
      'B[x]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
      'B[y]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
      'B[z]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
  Discretization:
    eblock-0_0_0:
      order:
        E: 1
        B: 1
      quadrature: 2
  Functions input file: input_functions.yaml
  Solver: 
    solver: 'transient'
    transient BDF order: 1
    transient Butcher tableau: DIRK-1,2
    workset size: 100
    nonlinear TOL: 1.0e-07
    linear TOL: 1.0e-09
    max nonlinear iters: 1
    max linear iters: 200
    final time: 1.0e-2
    number of steps: 1
    initial type: 'L2-projection'
    use preconditioner: true
    reuse preconditioner: true
    preconditioner type: domain decomposition
    preconditioner reuse type: full
    use direct solver: false
    allow backtracking: false
  Analysis: 
    analysis type: forward
  Postprocess:
    write solution: false
    write frequency: 1
    compute errors: true
    eblock-0_0_0:
      True solutions:
        'E[x]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
        'E[y]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
        'E[z]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
        'B[x]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
        'B[y]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
        'B[z]': 'sin(pi*x)*sin(pi*y)*sin(pi*z)'
    
...
