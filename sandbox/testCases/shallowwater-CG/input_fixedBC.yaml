%YAML 1.1
---
### Based off of example 1 in Samii, J. Sci. Comp. (2019) ###
ANONYMOUS:
  verbosity: 10
  debug level: 0
  profile: false
  Mesh:
    dimension: 2
    element type: quad
    xmin: -1.0
    xmax:  1.0
    ymin: -1.0
    ymax:  1.0
    NX: 40
    NY: 40
  Physics:
    modules: shallow water
    gravity: 1.0
    bathymetry: 0.
    bathymetry_x: 0.
    bathymetry_y: 0.
    Initial conditions:
      H: '2. + ss' 
      Hu: 'ss'
      Hv: 'ss'
    Dirichlet conditions:
      static data: true
      H:
        all boundaries: '2.'
      Hu:
        all boundaries: '0.'
      Hv:
        all boundaries: '0.'

  Functions:
    bathymetry: '0.'
    source H: '(2.0*pi*sin(pi*(2*x + 2*y)) + 1.5*cos(pi*(2*x - 2*y)) - 1.5*cos(pi*(2*x + 2*y)))*exp(3.0*t)'
    source Hu: '(4*pi*(0.5*exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 1)^2*exp(6.0*t)*sin(2*pi*x)*sin(pi*(2*x + 2*y)) - 0.5*pi*(exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 2.0)*exp(9.0*t)*sin(2*pi*x)^2*sin(2*pi*y)*sin(pi*(2*x + 2*y)) + (0.25*exp(3.0*t)*cos(pi*(2*x - 2*y)) - 0.25*exp(3.0*t)*cos(pi*(2*x + 2*y)) + 1)^3*(1.0*pi*exp(3.0*t)*cos(pi*(4*x - 2*y)) - 1.0*pi*exp(3.0*t)*cos(pi*(4*x + 2*y)) + 6.0*sin(2*pi*x) + 8.0*pi*cos(2*pi*x))*exp(3.0*t))*sin(2*pi*y)/((0.5*exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 1)^2*(exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 2.0))'
    source Hv: '(4*pi*(0.5*exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 1)^2*exp(6.0*t)*sin(2*pi*y)*sin(pi*(2*x + 2*y)) - 0.5*pi*(exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 2.0)*exp(9.0*t)*sin(2*pi*x)*sin(2*pi*y)^2*sin(pi*(2*x + 2*y)) + (0.25*exp(3.0*t)*cos(pi*(2*x - 2*y)) - 0.25*exp(3.0*t)*cos(pi*(2*x + 2*y)) + 1)^3*(1.0*pi*exp(3.0*t)*cos(pi*(2*x - 4*y)) - 1.0*pi*exp(3.0*t)*cos(pi*(2*x + 4*y)) + 6.0*sin(2*pi*y) + 8.0*pi*cos(2*pi*y))*exp(3.0*t))*sin(2*pi*x)/((0.5*exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 1)^2*(exp(3.0*t)*sin(2*pi*x)*sin(2*pi*y) + 2.0))' 
    ss: 'sin(2.*pi*x)*sin(2.*pi*y)'

  Discretization:
    order:
      H: 1
      Hu: 1
      Hv: 1
    quadrature: 2
  #Subgrid input file: subgrid_input.yaml
  Solver:
    #solver: steady-state
    #initial type: L2-projection-HFACE
    solver: transient
    workset size: 100
    nonlinear TOL: 1.0e-06
    linear TOL: 1.0e-6
    max nonlinear iters: 10
    max linear iters: 100
    final time: 1e-2
    delta t: 1e-2
    use direct solver: false
  Analysis: 
    analysis type: forward
  Postprocess: 
    write solution: true
    write subgrid solution: true
    write HFACE variables: true
    compute errors: true
    True solutions:
      H: '2. + ss*exp(3.*t)'
      Hu: 'ss*exp(3.*t)'
      Hv: 'ss*exp(3.*t)'
...
