%YAML 1.1
---
## This example is taken from 4.1.1 in Gravemeier and Wall
ANONYMOUS:
  verbosity: 10
  debug level: 0
  profile: false
  Mesh:
    dimension: 2
    #source: Exodus
    #mesh file: cavity.exo
    ## GRID :: [0,H] x [0,H] in units of cavity side length
    element type: quad
    xmin: 0.0
    xmax: 1.0
    ymin: 0.0
    ymax: 1.0
    NX: 80
    NY: 80
  Physics:
    modules: VDNS
    #assemble boundary terms: false
    #build face terms: false
    pr_point_DBCs: origin
    Dirichlet conditions:
      scalar data: false
      transient data: true
      static data: false
      ux:
        left: '0.0'
        right: '0.0'
        top: '0.0'
        bottom: '0.0'
      uy:
        left: '0.0'
        right: '0.0'
        top: '0.0'
        bottom: '0.0'
      T:
        left: 'TRef + t*(T_H-TRef)/10.*(10.>t) + (T_H-TRef)*(t>10.)' ## heat over the span of 10 seconds
        right: 'TRef + t*(T_C-TRef)/10.*(10.>t) + (T_C-TRef)*(t>10.)' ## cool over the span of 10 seconds
    Neumann conditions:
      ## Adiabatic on T for top and bottom
      T:
        top: '0.0'
        bottom: '0.0'
    Initial conditions:
      scalar data: false
      ux: '0.0'
      uy: '0.0'
      pr: '0.0'
      T:  'TRef'
    usePSPG: true
    useSUPG: true
    useDIVGRAD: false #true
    open system: false

  Discretization:
    order:
      ux: 1
      uy: 1
      pr: 1
      T: 1
    quadrature: 2
  Solver:
    #solver: steady-state
    solver: transient
    workset size: 100
    nonlinear TOL: 1.0e-06
    linear TOL: 1.0e-6
    max nonlinear iters: 10
    max linear iters: 100
    final time: 50.
    delta t: .25
    use direct solver: false
    use domain decomposition: false
    use strong DBCs: true
    use relative TOL: false
    use absolute TOL: true
    absolute nonlinear TOL: 1.0e-10
    Preconditioner Settings:
      verbosity: none
      number of equations: 4
      multigrid algorithm: unsmoothed
      'sa: use filtered matrix': true
      'sa: damping factor': 0.0
      'coarse: max size': 2000
      'transpose: use implicit': false
      'aggregation: type': uncoupled
      'aggregation: drop scheme': classical
      'aggregation: drop tol': 0.0
      'smoother: pre or post': both
      'smoother: type': SCHWARZ
      'smoother: params':
        'schwarz: overlap level': 1
        'schwarz: combine mode': Zero
        'schwarz: use reordering': false
        'schwarz: reordering list':
          order_method: rcm
        subdomain solver name: RILUK
        subdomain solver parameters:
          'fact: iluk level-of-fill': 1
          'fact: ilut level-of-fill': 1.75
          'fact: absolute threshold': 0.0
          'fact: relative threshold': 1.0
          'fact: relax value': 0.0
        #'chebyshev: degree': 2
        #'chebyshev: ratio eigenvalue': 7.0
        #'chebyshev: min eigenvalue': 1.0
        #'chebyshev: zero starting solution': true
        # 'relaxation: type': Gauss-Seidel #MT Gauss-Seidel
      'repartition: enable': false
      'reuse: type': none
  Analysis: 
    analysis type: forward
  Postprocess: 
    write solution: true
    write frequency: 10
    Extra cell fields:
      lambdTdy: 'lambda*grad(T)[y]'
      density: rho
      dynvisc: mu
      p0: p0
  Functions:
    source ux: '0.0'
    source uy: '-rho*g' ## TODO GRAVITY ??
    TRef: '300.' ## K
    T_H: '480.' ## K
    T_C: '120.' ## K
    muRef: '.003358' ## kg/m-s
    cp: '1004.5' ## J/kg-K
    S: '110.4' ## K
    RGas: '287.0'  ## J/kg-K
    PrNum: '.71' ## 
    g: '9.81' ## m/s^2
    #rho: 'p0/(RGas*TRef)'
    rho: 'p0/(RGas*T)'
    mu: '(T/TRef)^(3./2.)*(TRef + S)/(T + S)*muRef'
    lambda: 'cp*mu/PrNum'
    ## TODO keep these in common file or something like that
  Parameters:
    p0:
      type: scalar
      value: 100000.0 ## Pa
      usage: inactive
    dp0dt:
      type: scalar
      value: 0.0 ## Pa/s
      usage: inactive
...
